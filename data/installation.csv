URL,excerpt
https://github.com/GoogleChrome/puppeteer,Installation
https://github.com/GoogleChrome/puppeteer,"To use Puppeteer in your project, run:"
https://github.com/GoogleChrome/puppeteer,npm i puppeteer
https://github.com/GoogleChrome/puppeteer,"# or ""yarn add puppeteer"""
https://github.com/GoogleChrome/puppeteer,puppeteer-core
https://github.com/GoogleChrome/puppeteer,"Since version 1.7.0 we publish the puppeteer-core package, a version of Puppeteer that doesn't download Chromium by default."
https://github.com/GoogleChrome/puppeteer,npm i puppeteer-core
https://github.com/GoogleChrome/puppeteer,"# or ""yarn add puppeteer-core"""
https://github.com/JimmySuen/integral-human-pose,Environment
https://github.com/JimmySuen/integral-human-pose,Python Version: 3.6
https://github.com/JimmySuen/integral-human-pose,OS: CentOs7 (Other Linux system is also OK)
https://github.com/JimmySuen/integral-human-pose,CUDA: 9.0 (least 8.0)
https://github.com/JimmySuen/integral-human-pose,PyTorch:0.4.0(see issue https://github.com/JimmySuen/integral-human-pose/issues/4)
https://github.com/JimmySuen/integral-human-pose,Installation
https://github.com/JimmySuen/integral-human-pose,"We recommend installing python from Anaconda, installing pytorch following guide on PyTorch according to your specific CUDA & python version. In addition, you need to install dependencies below."
https://github.com/JimmySuen/integral-human-pose,pip install scipy
https://github.com/JimmySuen/integral-human-pose,pip install matplotlib
https://github.com/JimmySuen/integral-human-pose,pip install opencv-python
https://github.com/JimmySuen/integral-human-pose,pip install easydict
https://github.com/JimmySuen/integral-human-pose,pip install pyyaml
https://github.com/JuliaGeo/LibGEOS.jl,Installation
https://github.com/JuliaGeo/LibGEOS.jl,"At the Julia prompt, run"
https://github.com/JuliaGeo/LibGEOS.jl,"julia> Pkg.add(""LibGEOS"")"
https://github.com/JuliaGeo/LibGEOS.jl,"This will install both the Julia package and GEOS shared libraries together. To just reinstall the GEOS shared libraries, run Pkg.build(""LibGEOS"")."
https://github.com/JuliaGeo/LibGEOS.jl,Test that LibGEOS works by runnning
https://github.com/JuliaGeo/LibGEOS.jl,"julia> Pkg.test(""LibGEOS"")"
https://github.com/NSGeophysics/GPRPy,Simplemost installation
https://github.com/NSGeophysics/GPRPy,"In the following instructions, if you use Windows, use the comands python and pip. If you use Mac or Linux, use the commands python3 and pip3 instead."
https://github.com/NSGeophysics/GPRPy,Download the GPRPy software from https://github.com/NSGeophysics/GPRPy/archive/master.zip.
https://github.com/NSGeophysics/GPRPy,Save the file somewhere on your computer and extract the zip folder.
https://github.com/NSGeophysics/GPRPy,"As an alternative, you can install git from https://git-scm.com/, then run in a command prompt:"
https://github.com/NSGeophysics/GPRPy,git clone https://github.com/NSGeophysics/GPRPy.git
https://github.com/NSGeophysics/GPRPy,The advantage of the latter is that you can easily update your software by running from the GPRPy folder in a command prompt:
https://github.com/NSGeophysics/GPRPy,git pull origin master
https://github.com/NSGeophysics/GPRPy,Install Python 3.7 for example from https://conda.io/miniconda.html
https://github.com/NSGeophysics/GPRPy,"Once the installation finished, open a command prompt that can run Python"
https://github.com/NSGeophysics/GPRPy,"On Windows: click on Start, then enter ""Anaconda Prompt"", without the quotation marks into the ""Search programs and files"" field. On Mac or Linux, open the regular terminal."
https://github.com/NSGeophysics/GPRPy,"In the command prompt, change to the directory where you downloaded the GPRPy files. This is usually through a command like for example"
https://github.com/NSGeophysics/GPRPy,cd Desktop\GPRPy
https://github.com/NSGeophysics/GPRPy,if you downloaded GPRPy directly onto your desktop. Then type the following and press enter afterward:
https://github.com/NSGeophysics/GPRPy,python installMigration.py
https://github.com/NSGeophysics/GPRPy,Then type the following and press enter afterward:
https://github.com/NSGeophysics/GPRPy,pip install .
https://github.com/NSGeophysics/GPRPy,"don't forget the period ""."" at the end of the pip install command"
https://github.com/NVIDIA/vid2vid,Prerequisites
https://github.com/NVIDIA/vid2vid,Linux or macOS
https://github.com/NVIDIA/vid2vid,Python 3
https://github.com/NVIDIA/vid2vid,NVIDIA GPU + CUDA cuDNN
https://github.com/NVIDIA/vid2vid,PyTorch 0.4
https://github.com/NVIDIA/vid2vid,Installation
https://github.com/NVIDIA/vid2vid,Install python libraries dominate and requests.
https://github.com/NVIDIA/vid2vid,pip install dominate requests
https://github.com/NVIDIA/vid2vid,"If you plan to train with face datasets, please install dlib."
https://github.com/NVIDIA/vid2vid,pip install dlib
https://github.com/NVIDIA/vid2vid,"If you plan to train with pose datasets, please install DensePose and/or OpenPose."
https://github.com/NVIDIA/vid2vid,Clone this repo:
https://github.com/NVIDIA/vid2vid,git clone https://github.com/NVIDIA/vid2vid
https://github.com/NVIDIA/vid2vid,cd vid2vid
https://github.com/NVIDIA/vid2vid,"Docker Image If you have difficulty building the repo, a docker image can be found in the docker folder."
https://github.com/OpenGeoVis/PVGeo,"To begin using the PVGeo Python package, create/activate your Python virtual environment (we highly recommend using anaconda) and install PVGeo through pip:"
https://github.com/OpenGeoVis/PVGeo,pip install PVGeo
https://github.com/OpenGeoVis/omfvista,Installation
https://github.com/OpenGeoVis/omfvista,Installation is simply:
https://github.com/OpenGeoVis/omfvista,pip install omfvista
https://github.com/OpenGeoVis/omfvista,All necessary dependencies will be installed alongside omfvista. Please note that this package heavily leverages the PyVista package.
https://github.com/OpenGeoscience/geonotebook/,Installation
https://github.com/OpenGeoscience/geonotebook/,System Prerequisites
https://github.com/OpenGeoscience/geonotebook/,For default tile serving
https://github.com/OpenGeoscience/geonotebook/,GDAL >= 2.1.0
https://github.com/OpenGeoscience/geonotebook/,mapnik >= 3.1.0
https://github.com/OpenGeoscience/geonotebook/,python-mapnik >= 0.1
https://github.com/OpenGeoscience/geonotebook/,Clone the repo:
https://github.com/OpenGeoscience/geonotebook/,git clone https://github.com/OpenGeoscience/geonotebook.git
https://github.com/OpenGeoscience/geonotebook/,cd geonotebook
https://github.com/OpenGeoscience/geonotebook/,"Make a virtualenv, install jupyter[notebook], install geonotebook"
https://github.com/OpenGeoscience/geonotebook/,mkvirtualenv -a . geonotebook
https://github.com/OpenGeoscience/geonotebook/,# Numpy must be fully installed before rasterio
https://github.com/OpenGeoscience/geonotebook/,pip install -r prerequirements.txt
https://github.com/OpenGeoscience/geonotebook/,pip install -r requirements.txt
https://github.com/OpenGeoscience/geonotebook/,pip install .
https://github.com/OpenGeoscience/geonotebook/,# Enable both the notebook and server extensions
https://github.com/OpenGeoscience/geonotebook/,jupyter serverextension enable --sys-prefix --py geonotebook
https://github.com/OpenGeoscience/geonotebook/,jupyter nbextension enable --sys-prefix --py geonotebook
https://github.com/OpenGeoscience/geonotebook/,Note The serverextension and nbextension commands accept flags that configure how and where the extensions are installed. See jupyter serverextension --help for more information.
https://github.com/OpenGeoscience/geonotebook/,Installing geonotebook for development
https://github.com/OpenGeoscience/geonotebook/,"When developing geonotebook, it is often helpful to install packages as a reference to the checked out repository rather than copying them to the system site-packages. A ""development install"" will allow you to make live changes to python or javascript without reinstalling the package."
https://github.com/OpenGeoscience/geonotebook/,"# Install the geonotebook python package as ""editable"""
https://github.com/OpenGeoscience/geonotebook/,pip install -e .
https://github.com/OpenGeoscience/geonotebook/,# Install the notebook extension as a symlink
https://github.com/OpenGeoscience/geonotebook/,jupyter nbextension install --sys-prefix --symlink --py geonotebook
https://github.com/OpenGeoscience/geonotebook/,# Enable the extension
https://github.com/OpenGeoscience/geonotebook/,# Start the javascript builder
https://github.com/OpenGeoscience/geonotebook/,cd js
https://github.com/OpenGeoscience/geonotebook/,npm run watch
https://github.com/Toblerity/Fiona/,Installation
https://github.com/Toblerity/Fiona/,"Fiona requires Python 2.7 or 3.4+ and GDAL/OGR 1.8+. To build from a source distribution you will need a C compiler and GDAL and Python development headers and libraries (libgdal1-dev for Debian/Ubuntu, gdal-dev for CentOS/Fedora)."
https://github.com/Toblerity/Fiona/,"To build from a repository copy, you will also need Cython to build C sources from the project's .pyx files. See the project's requirements-dev.txt file for guidance."
https://github.com/Toblerity/Fiona/,"The Kyngchaos GDAL frameworks will satisfy the GDAL/OGR dependency for OS X, as will Homebrew's GDAL Formula (brew install gdal)."
https://github.com/Toblerity/Fiona/,Python Requirements
https://github.com/Toblerity/Fiona/,"Fiona depends on the modules enum34, six, cligj, munch, argparse, and ordereddict (the two latter modules are standard in Python 2.7+). Pip will fetch these requirements for you, but users installing Fiona from a Windows installer must get them separately."
https://github.com/Toblerity/Fiona/,Unix-like systems
https://github.com/Toblerity/Fiona/,"Assuming you're using a virtualenv (if not, skip to the 4th command) and GDAL/OGR libraries, headers, and gdal-config program are installed to well known locations on your system via your system's package manager (brew install gdal using Homebrew on OS X), installation is this simple."
https://github.com/Toblerity/Fiona/,$ mkdir fiona_env
https://github.com/Toblerity/Fiona/,$ virtualenv fiona_env
https://github.com/Toblerity/Fiona/,$ source fiona_env/bin/activate
https://github.com/Toblerity/Fiona/,(fiona_env)$ pip install fiona
https://github.com/Toblerity/Fiona/,"If gdal-config is not available or if GDAL/OGR headers and libs aren't installed to a well known location, you must set include dirs, library dirs, and libraries options via the setup.cfg file or setup command line as shown below (using git). You must also specify the version of the GDAL API on the command line using the --gdalversion argument (see example below) or with the GDAL_VERSION environment variable (e.g. export GDAL_VERSION=2.1)."
https://github.com/Toblerity/Fiona/,(fiona_env)$ git clone git://github.com/Toblerity/Fiona.git
https://github.com/Toblerity/Fiona/,(fiona_env)$ cd Fiona
https://github.com/Toblerity/Fiona/,(fiona_env)$ python setup.py build_ext -I/path/to/gdal/include -L/path/to/gdal/lib -lgdal install --gdalversion 2.1
https://github.com/Toblerity/Fiona/,Or specify that build options and GDAL API version should be provided by a particular gdal-config program.
https://github.com/Toblerity/Fiona/,(fiona_env)$ GDAL_CONFIG=/path/to/gdal-config pip install fiona
https://github.com/Toblerity/Fiona/,Windows
https://github.com/Toblerity/Fiona/,Binary installers are available at http://www.lfd.uci.edu/~gohlke/pythonlibs/#fiona and coming eventually to PyPI.
https://github.com/Toblerity/Fiona/,You can download a binary distribution of GDAL from here. You will also need to download the compiled libraries and headers (include files).
https://github.com/Toblerity/Fiona/,"When building from source on Windows, it is important to know that setup.py cannot rely on gdal-config, which is only present on UNIX systems, to discover the locations of header files and libraries that Fiona needs to compile its C extensions. On Windows, these paths need to be provided by the user. You will need to find the include files and the library files for gdal and use setup.py as follows. You must also specify the version of the GDAL API on the command line using the --gdalversion argument (see example below) or with the GDAL_VERSION environment variable (e.g. set GDAL_VERSION=2.1)."
https://github.com/Toblerity/Fiona/,$ python setup.py build_ext -I<path to gdal include files> -lgdal_i -L<path to gdal library> install --gdalversion 2.1
https://github.com/Toblerity/Fiona/,Note: The GDAL DLL (gdal111.dll or similar) and gdal-data directory need to be in your Windows PATH otherwise Fiona will fail to work.
https://github.com/Toblerity/Fiona/,"The Appveyor CI build uses the GISInternals GDAL binaries to build Fiona. This produces a binary wheel for successful builds, which includes GDAL and other dependencies, for users wanting to try an unstable development version. The Appveyor configuration file may be a useful example for users building from source on Windows."
https://github.com/Toblerity/Shapely,Requirements
https://github.com/Toblerity/Shapely,Shapely 1.6 requires
https://github.com/Toblerity/Shapely,"Python 2.7, >=3.4"
https://github.com/Toblerity/Shapely,GEOS >=3.3
https://github.com/Toblerity/Shapely,Installing Shapely 1.6
https://github.com/Toblerity/Shapely,Shapely may be installed from a source distribution or one of several kinds of built distribution.
https://github.com/Toblerity/Shapely,Built distributions
https://github.com/Toblerity/Shapely,Windows users have two good installation options: the wheels at http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely and the Anaconda platform's conda-forge channel.
https://github.com/Toblerity/Shapely,OS X and Linux users can get Shapely wheels with GEOS included from the Python Package Index with a recent version of pip (8+):
https://github.com/Toblerity/Shapely,$ pip install shapely
https://github.com/Toblerity/Shapely,A few extra speedups that require Numpy can be had by running
https://github.com/Toblerity/Shapely,$ pip install shapely[vectorized]
https://github.com/Toblerity/Shapely,"Shapely is available via system package management tools like apt, yum, and Homebrew, and is also provided by popular Python distributions like Canopy and Anaconda."
https://github.com/Toblerity/Shapely,Source distributions
https://github.com/Toblerity/Shapely,"If you want to build Shapely from source for compatibility with other modules that depend on GEOS (such as cartopy or osgeo.ogr) or want to use a different version of GEOS than the one included in the project wheels you should first install the GEOS library, Cython, and Numpy on your system (using apt, yum, brew, or other means) and then direct pip to ignore the binary wheels."
https://github.com/Toblerity/Shapely,$ pip install shapely --no-binary shapely
https://github.com/Toblerity/Shapely,"If you've installed GEOS to a standard location, the geos-config program will be used to get compiler and linker options. If geos-config is not on your executable, it can be specified with a GEOS_CONFIG environment variable, e.g.:"
https://github.com/Toblerity/Shapely,$ GEOS_CONFIG=/path/to/geos-config pip install shapely
https://github.com/XiaLiPKU/RESCAN,Prerequisite
https://github.com/XiaLiPKU/RESCAN,Python>=3.6
https://github.com/XiaLiPKU/RESCAN,Pytorch>=4.1.0
https://github.com/XiaLiPKU/RESCAN,Opencv>=3.1.0
https://github.com/XiaLiPKU/RESCAN,tensorboardX
https://github.com/ZhouYanzhao/PRM,Prerequisites
https://github.com/ZhouYanzhao/PRM,System (tested on Ubuntu 14.04LTS and Win10)
https://github.com/ZhouYanzhao/PRM,NVIDIA GPU + CUDA CuDNN (CPU mode is also supported but significantly slower)
https://github.com/ZhouYanzhao/PRM,Python>=3.5
https://github.com/ZhouYanzhao/PRM,PyTorch>=0.4
https://github.com/ZhouYanzhao/PRM,Jupyter Notebook and ipywidgets (required by the demo):
https://github.com/ZhouYanzhao/PRM,# enable the widgetsnbextension before you start the notebook server
https://github.com/ZhouYanzhao/PRM,jupyter nbextension enable --py --sys-prefix widgetsnbextension
https://github.com/ZhouYanzhao/PRM,"Install Nest, a flexible tool for building and sharing deep learning modules:"
https://github.com/ZhouYanzhao/PRM,I created Nest in the process of refactoring PRM's pytorch implementation. It aims at encouraging code reuse and ships with a bunch of useful features. PRM is now implemented as a set of Nest modules; thus you can easily install and use it as demonstrated below.
https://github.com/ZhouYanzhao/PRM,$ pip install git+https://github.com/ZhouYanzhao/Nest.git
https://github.com/ZhouYanzhao/PRM,Install PRM via Nest's CLI tool:
https://github.com/ZhouYanzhao/PRM,# note that data will be saved under your current path
https://github.com/ZhouYanzhao/PRM,$ nest module install github@ZhouYanzhao/PRM:pytorch prm
https://github.com/ZhouYanzhao/PRM,# verify the installation
https://github.com/ZhouYanzhao/PRM,$ nest module list --filter prm
https://github.com/ZhouYanzhao/PRM,# Output:
https://github.com/ZhouYanzhao/PRM,# 3 Nest modules found.
https://github.com/ZhouYanzhao/PRM,# [0] prm.fc_resnet50 (1.0.0)
https://github.com/ZhouYanzhao/PRM,# [1] prm.peak_response_mapping (1.0.0)
https://github.com/ZhouYanzhao/PRM,# [2] prm.prm_visualize (1.0.0)
https://github.com/agile-geoscience/striplog/,Dependencies
https://github.com/agile-geoscience/striplog/,"These are best installed with Anaconda, see Install, below."
https://github.com/agile-geoscience/striplog/,NumPy
https://github.com/agile-geoscience/striplog/,matplotlib
https://github.com/agile-geoscience/striplog/,Install
https://github.com/agile-geoscience/striplog/,pip install striplog
https://github.com/agile-geoscience/striplog/,I recommend setting up a virtual environment:
https://github.com/agile-geoscience/striplog/,Install Anaconda if you don't have it already
https://github.com/agile-geoscience/striplog/,"Then do this to create an environment called myenv (or whatever you like), answering Yes to the confirmation question:"
https://github.com/agile-geoscience/striplog/,conda create -n myenv python=3.5 numpy matplotlib
https://github.com/agile-geoscience/striplog/,source activate myenv
https://github.com/agile-geoscience/striplog/,Then you can do:
https://github.com/akanazawa/hmr,Requirements
https://github.com/akanazawa/hmr,Python 2.7
https://github.com/akanazawa/hmr,"TensorFlow tested on version 1.3, demo alone runs with TF 1.12"
https://github.com/akanazawa/hmr,Installation
https://github.com/akanazawa/hmr,Setup virtualenv
https://github.com/akanazawa/hmr,virtualenv venv_hmr
https://github.com/akanazawa/hmr,source venv_hmr/bin/activate
https://github.com/akanazawa/hmr,pip install -U pip
https://github.com/akanazawa/hmr,deactivate
https://github.com/akanazawa/hmr,pip install -r requirements.txt
https://github.com/akanazawa/hmr,Install TensorFlow
https://github.com/akanazawa/hmr,With GPU:
https://github.com/akanazawa/hmr,pip install tensorflow-gpu==1.3.0
https://github.com/akanazawa/hmr,Without GPU:
https://github.com/akanazawa/hmr,pip install tensorflow==1.3.0
https://github.com/akaszynski/pyansys,Installation
https://github.com/akaszynski/pyansys,Installation through pip:
https://github.com/akaszynski/pyansys,pip install pyansys
https://github.com/albertpumarola/GANimation,Prerequisites
https://github.com/albertpumarola/GANimation,"Install PyTorch (version 0.3.1), Torch Vision and dependencies from http://pytorch.org"
https://github.com/albertpumarola/GANimation,Install requirements.txt (pip install -r requirements.txt)
https://github.com/cgre-aachen/gempy,Installation
https://github.com/cgre-aachen/gempy,We provide the latest release version of GemPy via the Conda and PyPi package services. We highly recommend using either PyPi as it will take care of automatically installing all dependencies.
https://github.com/cgre-aachen/gempy,PyPi
https://github.com/cgre-aachen/gempy,$ pip install gempy
https://github.com/cgre-aachen/gempy,Manual
https://github.com/cgre-aachen/gempy,Otherwise you can clone the current repository by downloading is manually or by using Git by calling
https://github.com/cgre-aachen/gempy,$ git clone https://github.com/cgre-aachen/gempy.git
https://github.com/cgre-aachen/gempy,and then manually install it using the provided Python install file by calling
https://github.com/cgre-aachen/gempy,$ python gempy/setup.py install
https://github.com/cgre-aachen/gempy,in the cloned or downloaded repository folder. Make sure you have installed all necessary dependencies listed above before using GemPy.
https://github.com/cgre-aachen/gempy,Windows installation guide (Jun 2019)
https://github.com/cgre-aachen/gempy,Install CUDA if you do not have it already.
https://github.com/cgre-aachen/gempy,Install Anaconda3 2019.03 with Python 3.7 (this is the last release).
https://github.com/cgre-aachen/gempy,"Install Theano and associated packages from the Anaconda prompt as administrator, and finally install GemPy 2.0:"
https://github.com/cgre-aachen/gempy,conda update --all
https://github.com/cgre-aachen/gempy,conda install libpython
https://github.com/cgre-aachen/gempy,conda install m2w64-toolchain
https://github.com/cgre-aachen/gempy,conda install git
https://github.com/cgre-aachen/gempy,conda install pygpu
https://github.com/cgre-aachen/gempy,pip install theano==1.0.4
https://github.com/cgre-aachen/gempy,pip install gempy==2.0b0.dev2
https://github.com/cgre-aachen/gempy,Note that:
https://github.com/cgre-aachen/gempy,"a) some other packages required by Theano are already included in Anaconda: numpy, scipy, mkl-service, nose, and sphinx."
https://github.com/cgre-aachen/gempy,b) pydot-ng (suggested on Theano web site) yields a lot of errors. I dropped this. It is needed to handle large picture for gif/images and probably it is not needed by GemPy.
https://github.com/cgre-aachen/gempy,"c) Trying to install all the packages in one go but it does not work, as well as doing the same in Anaconda Navigator, or installing an older Anaconda release with Python 3.5 (Anaconda3 4.2.0) as indicated in some tutorial on Theano."
https://github.com/d3/d3,Installing
https://github.com/d3/d3,"If you use npm, npm install d3. Otherwise, download the latest release. The released bundle supports anonymous AMD, CommonJS, and vanilla environments. You can load directly from d3js.org, CDNJS, or unpkg. For example:"
https://github.com/d3/d3,"<script src=""https://d3js.org/d3.v5.js""></script>"
https://github.com/d3/d3,For the minified version:
https://github.com/d3/d3,"<script src=""https://d3js.org/d3.v5.min.js""></script>"
https://github.com/d3/d3,"You can also use the standalone D3 microlibraries. For example, d3-selection:"
https://github.com/d3/d3,"<script src=""https://d3js.org/d3-selection.v1.js""></script>"
https://github.com/driftingtides/hyvr,Installing the HyVR package
https://github.com/driftingtides/hyvr,Installing Python
https://github.com/driftingtides/hyvr,Windows
https://github.com/driftingtides/hyvr,"If you are using Windows, we recommend installing the Anaconda distribution of Python 3. This distribution has the majority of dependencies that HyVR requires."
https://github.com/driftingtides/hyvr,It is also a good idea to install the HyVR package into a virtual environment. Do this by opening a command prompt window and typing the following:
https://github.com/driftingtides/hyvr,conda create --name hyvr_env
https://github.com/driftingtides/hyvr,You need to then activate this environment:
https://github.com/driftingtides/hyvr,conda activate hyvr_env
https://github.com/driftingtides/hyvr,Linux
https://github.com/driftingtides/hyvr,"Depending on your preferences you can either use the Anaconda/Miniconda distribution of python, or the version of your package manager. If you choose the former, follow the same steps as for Windows."
https://github.com/driftingtides/hyvr,"If you choose the latter, you probably already have Python 3 installed. If not, you can install it using your package manager (e.g. apt on Ubuntu/Debian)."
https://github.com/driftingtides/hyvr,In any way we recommend using a virtual environment. Non-conda users can use virtualenvwrapper or pipenv.
https://github.com/driftingtides/hyvr,Installing HyVR
https://github.com/driftingtides/hyvr,"Once you have activated your virtual environment, you can install HyVR from PyPI using pip:"
https://github.com/driftingtides/hyvr,pip install hyvr
https://github.com/driftingtides/hyvr,"The version on PyPI should always be up to date. If it's not, you can also install HyVR from github:"
https://github.com/driftingtides/hyvr,git clone https://github.com/driftingtides/hyvr.git
https://github.com/driftingtides/hyvr,To install from source you need a C compiler.
https://github.com/driftingtides/hyvr,Installation from conda-forge will (hopefully) be coming soon.
https://github.com/driftingtides/hyvr,Requirements
https://github.com/driftingtides/hyvr,Python
https://github.com/driftingtides/hyvr,"HyVR was developed for use with Python 3.4 or greater. It may be possible to use with earlier versions of Python 3, however this has not been tested."
https://github.com/driftingtides/hyvr,Dependencies
https://github.com/driftingtides/hyvr,numpy <= 1.13.3
https://github.com/driftingtides/hyvr,matplotlib <= 2.1.0
https://github.com/driftingtides/hyvr,scipy = 1.0.0
https://github.com/driftingtides/hyvr,pandas = 0.21.0
https://github.com/driftingtides/hyvr,flopy == 3.2.9 (optional for modflow output)
https://github.com/driftingtides/hyvr,pyevtk = 1.1.0 (optional for VTK output)
https://github.com/driftingtides/hyvr,h5py (optional for HDF5 output)
https://github.com/driving-behavior/DBNet,Requirements
https://github.com/driving-behavior/DBNet,Tensorflow 1.2.0
https://github.com/driving-behavior/DBNet,Python 2.7
https://github.com/driving-behavior/DBNet,CUDA 8.0+ (For GPU)
https://github.com/driving-behavior/DBNet,"Python Libraries: numpy, scipy and laspy"
https://github.com/driving-behavior/DBNet,"The code has been tested with Python 2.7, Tensorflow 1.2.0, CUDA 8.0 and cuDNN 5.1 on Ubuntu 14.04. But it may work on more machines (directly or through mini-modification), pull-requests or test report are well welcomed."
https://github.com/empymod/empymod,Installation
https://github.com/empymod/empymod,You can install empymod either via conda:
https://github.com/empymod/empymod,conda install -c prisae empymod
https://github.com/empymod/empymod,or via pip:
https://github.com/empymod/empymod,pip install empymod
https://github.com/empymod/empymod,Required are Python version 3.5 or higher and the modules NumPy and SciPy. Consult the installation notes in the manual for more information regarding installation and requirements.
https://github.com/endernewton/iter-reason,Prerequisites
https://github.com/endernewton/iter-reason,"Tensorflow, tested with version 1.6 with Ubuntu 16.04, installed with:"
https://github.com/endernewton/iter-reason,pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.6.0-cp27-none-linux_x86_64.whl
https://github.com/endernewton/iter-reason,Other packages needed can be installed with pip:
https://github.com/endernewton/iter-reason,pip install Cython easydict matplotlib opencv-python Pillow pyyaml scipy
https://github.com/endernewton/iter-reason,"For running COCO, the API can be installed globally:"
https://github.com/endernewton/iter-reason,# any path is okay
https://github.com/endernewton/iter-reason,mkdir ~/install && cd ~/install
https://github.com/endernewton/iter-reason,git clone https://github.com/cocodataset/cocoapi.git cocoapi
https://github.com/endernewton/iter-reason,cd cocoapi/PythonAPI
https://github.com/endernewton/iter-reason,python setup.py install --user
https://github.com/endernewton/iter-reason,git clone https://github.com/endernewton/iter-reason.git
https://github.com/endernewton/iter-reason,cd iter-reason
https://github.com/endernewton/iter-reason,"Set up data, here we use ADE20K as an example."
https://github.com/endernewton/iter-reason,mkdir -p data/ADE
https://github.com/endernewton/iter-reason,cd data/ADE
https://github.com/endernewton/iter-reason,wget -v http://groups.csail.mit.edu/vision/datasets/ADE20K/ADE20K_2016_07_26.zip
https://github.com/endernewton/iter-reason,tar -xzvf ADE20K_2016_07_26.zip
https://github.com/endernewton/iter-reason,mv ADE20K_2016_07_26/* ./
https://github.com/endernewton/iter-reason,rmdir ADE20K_2016_07_26
https://github.com/endernewton/iter-reason,# then get the train/val/test split
https://github.com/endernewton/iter-reason,wget -v http://xinleic.xyz/data/ADE_split.tar.gz
https://github.com/endernewton/iter-reason,tar -xzvf ADE_split.tar.gz
https://github.com/endernewton/iter-reason,rm -vf ADE_split.tar.gz
https://github.com/endernewton/iter-reason,cd ../..
https://github.com/endernewton/iter-reason,Set up pre-trained ImageNet models. This is similarly done in tf-faster-rcnn. Here by default we use ResNet-50 as the backbone:
https://github.com/endernewton/iter-reason,mkdir -p data/imagenet_weights
https://github.com/endernewton/iter-reason,cd data/imagenet_weights
https://github.com/endernewton/iter-reason,wget -v http://download.tensorflow.org/models/resnet_v1_50_2016_08_28.tar.gz
https://github.com/endernewton/iter-reason,tar -xzvf resnet_v1_50_2016_08_28.tar.gz
https://github.com/endernewton/iter-reason,mv resnet_v1_50.ckpt res50.ckpt
https://github.com/endernewton/iter-reason,Compile the library (for computing bounding box overlaps).
https://github.com/endernewton/iter-reason,cd lib
https://github.com/endernewton/iter-reason,make
https://github.com/endernewton/iter-reason,cd ..
https://github.com/endernewton/iter-reason,"Now you are ready to run! For example, to train and test the baseline:"
https://github.com/endernewton/iter-reason,./experiments/scripts/train.sh [GPU_ID] [DATASET] [NET] [STEPS] [ITER]
https://github.com/endernewton/iter-reason,# GPU_ID is the GPU you want to test on
https://github.com/endernewton/iter-reason,"# DATASET in {ade, coco, vg} is the dataset to train/test on, defined in the script"
https://github.com/endernewton/iter-reason,"# NET in {res50, res101} is the backbone networks to choose from"
https://github.com/endernewton/iter-reason,"# STEPS (x10K) is the number of iterations before it reduces learning rate, can support multiple steps separated by character 'a'"
https://github.com/endernewton/iter-reason,# ITER (x10K) is the total number of iterations to run
https://github.com/endernewton/iter-reason,# Examples:
https://github.com/endernewton/iter-reason,"# train on ADE20K for 320K iterations, reducing learning rate at 280K."
https://github.com/endernewton/iter-reason,./experiments/scripts/train.sh 0 ade 28 32
https://github.com/endernewton/iter-reason,"# train on COCO for 720K iterations, reducing at 320K and 560K."
https://github.com/endernewton/iter-reason,./experiments/scripts/train.sh 1 coco 32a56 72
https://github.com/endernewton/iter-reason,To train and test the reasoning modules (based on ResNet-50):
https://github.com/endernewton/iter-reason,./experiments/scripts/train_memory.sh [GPU_ID] [DATASET] [MEM] [STEPS] [ITER]
https://github.com/endernewton/iter-reason,# MEM in {local} is the type of reasoning modules to use
https://github.com/endernewton/iter-reason,# train on ADE20K on the local spatial memory.
https://github.com/endernewton/iter-reason,./experiments/scripts/train_memory.sh 0 ade local 28 32
https://github.com/endernewton/iter-reason,"Once the training is done, you can test the models separately with test.sh and test_memory.sh, we also provided a separate set of scripts to test on larger image inputs."
https://github.com/endernewton/iter-reason,"You can use tensorboard to visualize and track the progress, for example:"
https://github.com/endernewton/iter-reason,tensorboard --logdir=tensorboard/res50/ade_train_5/ --port=7002 &
https://github.com/equinor/pylops,From PyPi
https://github.com/equinor/pylops,"If you want to use PyLops within your codes, install it in your Python environment by typing the following command in your terminal:"
https://github.com/equinor/pylops,pip install pylops
https://github.com/equinor/pylops,Open a python terminal and type:
https://github.com/equinor/pylops,import pylops
https://github.com/equinor/pylops,"If you do not see any error, you should be good to go, enjoy!"
https://github.com/equinor/pylops,From Conda-forge
https://github.com/equinor/pylops,"Alternatively, you can install PyLops using the conda-forge distribution by typing the following command in your terminal:"
https://github.com/equinor/pylops,conda install -c conda-forge pylops
https://github.com/equinor/segyio,Get segyio
https://github.com/equinor/segyio,A copy of segyio is available both as pre-built binaries and source code:
https://github.com/equinor/segyio,In Debian unstable
https://github.com/equinor/segyio,apt install python3-segyio
https://github.com/equinor/segyio,Wheels for Python from PyPI
https://github.com/equinor/segyio,pip install segyio
https://github.com/equinor/segyio,Source code from github
https://github.com/equinor/segyio,git clone https://github.com/statoil/segyio
https://github.com/equinor/segyio,Source code in tarballs
https://github.com/equinor/segyio,Build segyio
https://github.com/equinor/segyio,To build segyio you need:
https://github.com/equinor/segyio,A C99 compatible C compiler (tested mostly on gcc and clang)
https://github.com/equinor/segyio,"A C++ compiler for the Python extension, and C++11 for the tests"
https://github.com/equinor/segyio,CMake version 2.8.12 or greater
https://github.com/equinor/segyio,Python 2.7 or 3.x.
https://github.com/equinor/segyio,numpy version 1.10 or greater
https://github.com/equinor/segyio,setuptools version 28 or greater
https://github.com/equinor/segyio,setuptools-scm
https://github.com/equinor/segyio,pytest
https://github.com/equinor/segyio,"To build the documentation, you also need sphinx"
https://github.com/equinor/segyio,"To build and install segyio, perform the following actions in your console:"
https://github.com/equinor/segyio,git clone https://github.com/equinor/segyio
https://github.com/equinor/segyio,mkdir segyio/build
https://github.com/equinor/segyio,cd segyio/build
https://github.com/equinor/segyio,cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
https://github.com/equinor/segyio,make
https://github.com/equinor/segyio,make install
https://github.com/equinor/segyio,"make install must be done as root for a system install; if you want to install in your home directory, add -DCMAKE_INSTALL_PREFIX=~/ or some other appropriate directory, or make DESTDIR=~/ install. Please ensure your environment picks up on non-standard install locations (PYTHONPATH, LD_LIBRARY_PATH and PATH)."
https://github.com/equinor/segyio,"If you have multiple Python installations, or want to use some alternative interpreter, you can help cmake find the right one by passing -DPYTHON_EXECUTABLE=/opt/python/binary along with install prefix and build type."
https://github.com/equinor/segyio,"To build the matlab bindings, invoke CMake with the option -DBUILD_MEX=ON. In some environments the Matlab binaries are in a non-standard location, in which case you need to help CMake find the matlab binaries by passing -DMATLAB_ROOT=/path/to/matlab."
https://github.com/facebook/react,Installation
https://github.com/facebook/react,"React has been designed for gradual adoption from the start, and you can use as little or as much React as you need:"
https://github.com/facebook/react,Use Online Playgrounds to get a taste of React.
https://github.com/facebook/react,Add React to a Website as a <script> tag in one minute.
https://github.com/facebook/react,Create a New React App if you're looking for a powerful JavaScript toolchain.
https://github.com/facebook/react,"You can use React as a <script> tag from a CDN, or as a react package on npm."
https://github.com/geopandas/geopandas/,Install
https://github.com/geopandas/geopandas/,See the installation docs for all details. GeoPandas depends on the following packages:
https://github.com/geopandas/geopandas/,pandas
https://github.com/geopandas/geopandas/,shapely
https://github.com/geopandas/geopandas/,fiona
https://github.com/geopandas/geopandas/,pyproj
https://github.com/geopandas/geopandas/,"Further, descartes and matplotlib are optional dependencies, required for plotting, and rtree is an optional dependency, required for spatial joins. rtree requires the C library libspatialindex."
https://github.com/geopandas/geopandas/,"Those packages depend on several low-level libraries for geospatial analysis, which can be a challenge to install. Therefore, we recommend to install GeoPandas using the conda package manager. See the installation docs for more details."
https://github.com/google/sg2im/,Setup
https://github.com/google/sg2im/,All code was developed and tested on Ubuntu 16.04 with Python 3.5 and PyTorch 0.4.
https://github.com/google/sg2im/,You can setup a virtual environment to run the code like this:
https://github.com/google/sg2im/,python3 -m venv env               # Create a virtual environment
https://github.com/google/sg2im/,source env/bin/activate           # Activate virtual environment
https://github.com/google/sg2im/,pip install -r requirements.txt   # Install dependencies
https://github.com/google/sg2im/,echo $PWD > env/lib/python3.5/site-packages/sg2im.pth  # Add current directory to python path
https://github.com/google/sg2im/,# Work for a while ...
https://github.com/google/sg2im/,deactivate  # Exit virtual environment
https://github.com/gprMax/gprMax,Installation
https://github.com/gprMax/gprMax,The following steps provide guidance on how to install gprMax:
https://github.com/gprMax/gprMax,"Install Python, required Python packages, and get the gprMax source code from GitHub"
https://github.com/gprMax/gprMax,Install a C compiler which supports OpenMP
https://github.com/gprMax/gprMax,Build and install gprMax
https://github.com/gprMax/gprMax,You can watch screencasts that demonstrate the installation and update processes.
https://github.com/gprMax/gprMax,"1. Install Python, required Python packages, and get gprMax source"
https://github.com/gprMax/gprMax,"We recommend using Miniconda to install Python and the required Python packages for gprMax in a self-contained Python environment. Miniconda is a mini version of Anaconda which is a completely free Python distribution (including for commercial use and redistribution). It includes more than 300 of the most popular Python packages for science, math, engineering, and data analysis."
https://github.com/gprMax/gprMax,Download and install Miniconda. Choose the Python 3.x version for your platform. We recommend choosing the installation options to: install Miniconda only for your user account; add Miniconda to your PATH environment variable; and to register Miniconda Python as your default Python. See the Quick Install page for help installing Miniconda.
https://github.com/gprMax/gprMax,Open a Terminal (Linux/macOS) or Command Prompt (Windows) and run the following commands:
https://github.com/gprMax/gprMax,$ conda update conda
https://github.com/gprMax/gprMax,$ conda install git
https://github.com/gprMax/gprMax,$ git clone https://github.com/gprMax/gprMax.git
https://github.com/gprMax/gprMax,$ cd gprMax
https://github.com/gprMax/gprMax,$ conda env create -f conda_env.yml
https://github.com/gprMax/gprMax,"This will make sure conda is up-to-date, install Git, get the latest gprMax source code from GitHub, and create an environment for gprMax with all the necessary Python packages."
https://github.com/gprMax/gprMax,"If you prefer to install Python and the required Python packages manually, i.e. without using Anaconda/Miniconda, look in the conda_env.yml file for a list of the requirements."
https://github.com/gprMax/gprMax,2. Install a C compiler which supports OpenMP
https://github.com/gprMax/gprMax,Linux
https://github.com/gprMax/gprMax,"gcc should be already installed, so no action is required."
https://github.com/gprMax/gprMax,macOS
https://github.com/gprMax/gprMax,"Xcode (the IDE for macOS) comes with the LLVM (clang) compiler, but it does not currently support OpenMP, so you must install gcc. That said, it is still useful to have Xcode (with command line tools) installed. It can be downloaded from the App Store. Once Xcode is installed, download and install the Homebrew package manager and then to install gcc, run:"
https://github.com/gprMax/gprMax,$ brew install gcc
https://github.com/gprMax/gprMax,Microsoft Windows
https://github.com/gprMax/gprMax,"Download and install Microsoft Visual C++ 2015 Build Tools (currently you must use the 2015 version, not 2017). Use the custom installation option and deselect everything apart from the Windows SDK for your version of Windows."
https://github.com/gprMax/gprMax,"Alternatively if you are using Windows 10 and feeling adventurous you can install the Windows Subsystem for Linux and then follow the Linux install instructions for gprMax. Note however that currently WSL does not aim to support GUI desktops or applications, e.g. Gnome, KDE, etc...."
https://github.com/gprMax/gprMax,3. Build and install gprMax
https://github.com/gprMax/gprMax,Once you have installed the aforementioned tools follow these steps to build and install gprMax:
https://github.com/gprMax/gprMax,"Open a Terminal (Linux/macOS) or Command Prompt (Windows), navigate into the top-level gprMax directory, and if it is not already active, activate the gprMax conda environment conda activate gprMax. Run the following commands:"
https://github.com/gprMax/gprMax,(gprMax)$ python setup.py build
https://github.com/gprMax/gprMax,(gprMax)$ python setup.py install
https://github.com/gprMax/gprMax,You are now ready to proceed to running gprMax.
https://github.com/gprMax/gprMax,"If you have problems with building gprMax on Microsoft Windows, you may need to add C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin to your path environment variable."
https://github.com/haoliangyu/node-qa-masker,Installation
https://github.com/haoliangyu/node-qa-masker,npm install qa-masker
https://github.com/hezhangsprinter/DCPDN,Prerequisites:
https://github.com/hezhangsprinter/DCPDN,Linux
https://github.com/hezhangsprinter/DCPDN,Python 2 or 3
https://github.com/hezhangsprinter/DCPDN,CPU or NVIDIA GPU + CUDA CuDNN (CUDA 8.0)
https://github.com/hezhangsprinter/DCPDN,Installation:
https://github.com/hezhangsprinter/DCPDN,Install PyTorch and dependencies from http://pytorch.org (Ubuntu+Python2.7) (conda install pytorch torchvision -c pytorch) Install pytorch 0.3.1 https://pytorch.org/previous-versions/
https://github.com/hezhangsprinter/DCPDN,Install Torch vision from the source.
https://github.com/hezhangsprinter/DCPDN,git clone https://github.com/pytorch/vision
https://github.com/hezhangsprinter/DCPDN,cd vision
https://github.com/hezhangsprinter/DCPDN,python setup.py install
https://github.com/hezhangsprinter/DCPDN,"Install python package: numpy, scipy, PIL, pdb"
https://github.com/hezhangsprinter/DID-MDN,Prerequisites:
https://github.com/hezhangsprinter/DID-MDN,Linux
https://github.com/hezhangsprinter/DID-MDN,Python 2 or 3
https://github.com/hezhangsprinter/DID-MDN,CPU or NVIDIA GPU + CUDA CuDNN (CUDA 8.0)
https://github.com/hezhangsprinter/DID-MDN,Installation:
https://github.com/hezhangsprinter/DID-MDN,Install PyTorch and dependencies from http://pytorch.org (Ubuntu+Python2.7) (conda install pytorch torchvision -c pytorch)
https://github.com/hezhangsprinter/DID-MDN,Install Torch vision from the source. (git clone https://github.com/pytorch/vision cd vision python setup.py install)
https://github.com/hezhangsprinter/DID-MDN,"Install python package: numpy, scipy, PIL, pdb"
https://github.com/hiroharu-kato/neural_renderer,Installation
https://github.com/hiroharu-kato/neural_renderer,sudo python setup.py install
https://github.com/iannesbitt/readgssi,requirements
https://github.com/iannesbitt/readgssi,Strongly recommended to install via anaconda:
https://github.com/iannesbitt/readgssi,obspy
https://github.com/iannesbitt/readgssi,matplotlib
https://github.com/iannesbitt/readgssi,numpy
https://github.com/iannesbitt/readgssi,pandas
https://github.com/iannesbitt/readgssi,h5py
https://github.com/iannesbitt/readgssi,Install via pip:
https://github.com/iannesbitt/readgssi,pynmea2
https://github.com/iannesbitt/readgssi,geopy
https://github.com/iannesbitt/readgssi,pytz
https://github.com/iannesbitt/readgssi,installation
https://github.com/iannesbitt/readgssi,"Once you have anaconda running, installing requirements is pretty easy."
https://github.com/iannesbitt/readgssi,conda config --add channels conda-forge
https://github.com/iannesbitt/readgssi,conda create -n readgssi python==3.7 pandas h5py pytz obspy
https://github.com/iannesbitt/readgssi,conda activate readgssi
https://github.com/iannesbitt/readgssi,pip install readgssi
https://github.com/iannesbitt/readgssi,That should allow you to run the commands below.
https://github.com/iannesbitt/readgssi,installing from source:
https://github.com/iannesbitt/readgssi,"If you choose to install a specific commit rather than the latest working release of this software, you may download this package, unzip to your home folder, open a command line, then install in the following way:"
https://github.com/iannesbitt/readgssi,pip install ~/readgssi
https://github.com/imfunniee/gitfolio,Let's Install
https://github.com/imfunniee/gitfolio,Install gitfolio
https://github.com/imfunniee/gitfolio,npm i gitfolio -g
https://github.com/jiangsutx/SRN-Deblur,Prerequisites
https://github.com/jiangsutx/SRN-Deblur,Python2.7
https://github.com/jiangsutx/SRN-Deblur,Scipy
https://github.com/jiangsutx/SRN-Deblur,Scikit-image
https://github.com/jiangsutx/SRN-Deblur,numpy
https://github.com/jiangsutx/SRN-Deblur,Tensorflow 1.4 with NVIDIA GPU or CPU (cpu testing is very slow)
https://github.com/jiangsutx/SRN-Deblur,Installation
https://github.com/jiangsutx/SRN-Deblur,Clone this project to your machine.
https://github.com/jiangsutx/SRN-Deblur,git clone https://github.com/jiangsutx/SRN-Deblur.git
https://github.com/jiangsutx/SRN-Deblur,cd SRN-Deblur
https://github.com/joferkington/mplstereonet,Install
https://github.com/joferkington/mplstereonet,mplstereonet can be installed from PyPi using pip by:
https://github.com/joferkington/mplstereonet,pip install mplstereonet
https://github.com/joferkington/mplstereonet,"Alternatively, you can download the source and install locally using (from the main directory of the repository):"
https://github.com/joferkington/mplstereonet,python setup.py install
https://github.com/joferkington/mplstereonet,"If you're planning on developing mplstereonet or would like to experiment with making local changes, consider setting up a development installation so that your changes are reflected when you import the package:"
https://github.com/joferkington/mplstereonet,python setup.py develop
https://github.com/jupyter-widgets/ipyleaflet,Installation
https://github.com/jupyter-widgets/ipyleaflet,Using conda:
https://github.com/jupyter-widgets/ipyleaflet,$ conda install -c conda-forge ipyleaflet
https://github.com/jupyter-widgets/ipyleaflet,Using pip:
https://github.com/jupyter-widgets/ipyleaflet,$ pip install ipyleaflet
https://github.com/jupyter-widgets/ipyleaflet,$ jupyter nbextension enable --py --sys-prefix ipyleaflet  # can be skipped for
https://github.com/jupyter-widgets/ipyleaflet,notebook 5.3 and above
https://github.com/jupyter-widgets/ipyleaflet,"If you have JupyterLab, you will also need to install the JupyterLab extension:"
https://github.com/jupyter-widgets/ipyleaflet,$ jupyter labextension install jupyter-leaflet
https://github.com/jupyter-widgets/ipyleaflet,Some users have found that the jupyterlab-manager is also required in jupyterlab if the map does not display.
https://github.com/jupyter-widgets/ipyleaflet,$ jupyter labextension install @jupyter-widgets/jupyterlab-manager
https://github.com/jupyter-widgets/ipyleaflet,Installation from sources
https://github.com/jupyter-widgets/ipyleaflet,For a development installation (requires npm):
https://github.com/jupyter-widgets/ipyleaflet,$ git clone https://github.com/jupyter-widgets/ipyleaflet.git
https://github.com/jupyter-widgets/ipyleaflet,$ cd ipyleaflet
https://github.com/jupyter-widgets/ipyleaflet,$ pip install -e .
https://github.com/jupyter-widgets/ipyleaflet,$ jupyter nbextension install --py --symlink --sys-prefix ipyleaflet
https://github.com/jupyter-widgets/ipyleaflet,$ jupyter nbextension enable --py --sys-prefix ipyleaflet
https://github.com/jupyter-widgets/ipyleaflet,$ jupyter labextension install js  # If you are developing on JupyterLab
https://github.com/jupyter-widgets/ipyleaflet,Note for developers:
https://github.com/jupyter-widgets/ipyleaflet,the -e pip option allows one to modify the Python code in-place. Restart the kernel in order to see the changes.
https://github.com/jupyter-widgets/ipyleaflet,the --symlink argument on Linux or OS X allows one to modify the JavaScript code in-place. This feature is not available with Windows.
https://github.com/jupyter-widgets/ipyleaflet,"For automatically building the JavaScript code every time there is a change, run the following command from the ipyleaflet/js/ directory:"
https://github.com/jupyter-widgets/ipyleaflet,$ npm run watch
https://github.com/jupyter-widgets/ipyleaflet,If you are on JupyterLab you also need to run the following in a separate terminal:
https://github.com/jupyter-widgets/ipyleaflet,$ jupyter lab --watch
https://github.com/jupyter-widgets/ipyleaflet,Every time a JavaScript build has terminated you need to refresh the Notebook page in order to load the JavaScript code again.
https://github.com/jwass/mplleaflet,Install mplleaflet from PyPI using $ pip install mplleaflet.
https://github.com/kenshohara/3D-ResNets-PyTorch,PyTorch
https://github.com/kenshohara/3D-ResNets-PyTorch,conda install pytorch torchvision cuda80 -c soumith
https://github.com/kenshohara/3D-ResNets-PyTorch,"FFmpeg, FFprobe"
https://github.com/kenshohara/3D-ResNets-PyTorch,wget http://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz
https://github.com/kenshohara/3D-ResNets-PyTorch,tar xvf ffmpeg-release-64bit-static.tar.xz
https://github.com/kenshohara/3D-ResNets-PyTorch,cd ./ffmpeg-3.3.3-64bit-static/; sudo cp ffmpeg ffprobe /usr/local/bin;
https://github.com/kenshohara/3D-ResNets-PyTorch,Python 3
https://github.com/kinverarity1/lasio/,Install the usual way:
https://github.com/kinverarity1/lasio/,$ pip install lasio
https://github.com/kosmtik/kosmtik,Install or Update
https://github.com/kosmtik/kosmtik,"Note: Node.js versions are moving very fast, and kosmtik or its dependencies are hardly totally up to date with latest release. Ideally, you should run the LTS version of Node.js. You can use a Node.js version manager (like NVM) to help."
https://github.com/kosmtik/kosmtik,npm -g install kosmtik
https://github.com/kosmtik/kosmtik,This might need root/Administrator rights. If you cannot install globally you can also install locally with
https://github.com/kosmtik/kosmtik,npm install kosmtik
https://github.com/kosmtik/kosmtik,This will create a node_modules/kosmtik folder. You then have to replace all occurences of kosmtik below with node node_modules/kosmtik/index.js.
https://github.com/kosmtik/kosmtik,To reinstall all plugins:
https://github.com/kosmtik/kosmtik,kosmtik plugins --reinstall
https://github.com/mapbox/geojson-vt,Install
https://github.com/mapbox/geojson-vt,Install using NPM (npm install geojson-vt) or Yarn (yarn add geojson-vt)
https://github.com/mapbox/rasterio,Installation
https://github.com/mapbox/rasterio,Please install Rasterio in a virtual environment so that its requirements don't tamper with your system's Python.
https://github.com/mapbox/rasterio,SSL certs
https://github.com/mapbox/rasterio,"The Linux wheels on PyPI are built on CentOS and libcurl expects certs to be in /etc/pki/tls/certs/ca-bundle.crt. Ubuntu's certs, for example, are in a different location. You may need to use the CURL_CA_BUNDLE environment variable to specify the location of SSL certs on your computer. On an Ubuntu system set the variable as shown below."
https://github.com/mapbox/rasterio,$ export CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
https://github.com/mapbox/rasterio,Dependencies
https://github.com/mapbox/rasterio,Rasterio has a C library dependency: GDAL >=1.11. GDAL itself depends on some other libraries provided by most major operating systems and also depends on the non standard GEOS and PROJ4 libraries. How to meet these requirement will be explained below.
https://github.com/mapbox/rasterio,Rasterio's Python dependencies are listed in its requirements.txt file.
https://github.com/mapbox/rasterio,Development also requires (see requirements-dev.txt) Cython and other packages.
https://github.com/mapbox/rasterio,Binary Distributions
https://github.com/mapbox/rasterio,Use a binary distributions that directly or indirectly provide GDAL if possible.
https://github.com/mapbox/rasterio,Linux
https://github.com/mapbox/rasterio,Rasterio distributions are available from UbuntuGIS and Anaconda's conda-forge channel.
https://github.com/mapbox/rasterio,Manylinux1 wheels are available on PyPI.
https://github.com/mapbox/rasterio,OS X
https://github.com/mapbox/rasterio,"Binary distributions with GDAL, GEOS, and PROJ4 libraries included are available for OS X versions 10.7+ starting with Rasterio version 0.17. To install, run pip install rasterio. These binary wheels are preferred by newer versions of pip."
https://github.com/mapbox/rasterio,"If you don't want these wheels and want to install from a source distribution, run pip install rasterio --no-binary rasterio instead."
https://github.com/mapbox/rasterio,"The included GDAL library is fairly minimal, providing only the format drivers that ship with GDAL and are enabled by default. To get access to more formats, you must build from a source distribution (see below)."
https://github.com/mapbox/rasterio,Windows
https://github.com/mapbox/rasterio,Binary wheels for rasterio and GDAL are created by Christoph Gohlke and are available from his website.
https://github.com/mapbox/rasterio,"To install rasterio, simply download both binaries for your system (rasterio and GDAL) and run something like this from the downloads folder:"
https://github.com/mapbox/rasterio,$ pip install -U pip
https://github.com/mapbox/rasterio,$ pip install GDAL-2.0.2-cp27-none-win32.whl
https://github.com/mapbox/rasterio,$ pip install rasterio-0.34.0-cp27-cp27m-win32.whl
https://github.com/mapbox/rasterio,You can also install rasterio with conda using Anaconda's conda-forge channel.
https://github.com/mapbox/rasterio,$ conda install -c conda-forge rasterio
https://github.com/mapbox/rasterio,Source Distributions
https://github.com/mapbox/rasterio,Rasterio is a Python C extension and to build you'll need a working compiler (XCode on OS X etc). You'll also need Numpy preinstalled; the Numpy headers are required to run the rasterio setup script. Numpy has to be installed (via the indicated requirements file) before rasterio can be installed. See rasterio's Travis configuration for more guidance.
https://github.com/mapbox/rasterio,The following commands are adapted from Rasterio's Travis-CI configuration.
https://github.com/mapbox/rasterio,$ sudo add-apt-repository ppa:ubuntugis/ppa
https://github.com/mapbox/rasterio,$ sudo apt-get update
https://github.com/mapbox/rasterio,$ sudo apt-get install gdal-bin libgdal-dev
https://github.com/mapbox/rasterio,$ pip install rasterio
https://github.com/mapbox/rasterio,Adapt them as necessary for your Linux system.
https://github.com/mapbox/rasterio,"For a Homebrew based Python environment, do the following."
https://github.com/mapbox/rasterio,$ brew update
https://github.com/mapbox/rasterio,$ brew install gdal
https://github.com/mapbox/rasterio,$ pip install --no-use-wheel rasterio
https://github.com/mapbox/rasterio,"Alternatively, you can install GDAL binaries from kyngchaos. You will then need to add the installed location /Library/Frameworks/GDAL.framework/Programs to your system path."
https://github.com/mapbox/rasterio,You can download a binary distribution of GDAL from here. You will also need to download the compiled libraries and headers (include files).
https://github.com/mapbox/rasterio,"When building from source on Windows, it is important to know that setup.py cannot rely on gdal-config, which is only present on UNIX systems, to discover the locations of header files and libraries that rasterio needs to compile its C extensions. On Windows, these paths need to be provided by the user. You will need to find the include files and the library files for gdal and use setup.py as follows."
https://github.com/mapbox/rasterio,$ python setup.py build_ext -I<path to gdal include files> -lgdal_i -L<path to gdal library>
https://github.com/mapbox/rasterio,$ python setup.py install
https://github.com/mapbox/rasterio,We have had success compiling code using the same version of Microsoft's Visual Studio used to compile the targeted version of Python (more info on versions used here.).
https://github.com/mapbox/rasterio,Note: The GDAL dll (gdal111.dll) and gdal-data directory need to be in your Windows PATH otherwise rasterio will fail to work.
https://github.com/mapbox/tilelive-mapnik,npm install tilelive-mapnik
https://github.com/mapbox/tilelive-mapnik,Though tilelive is not a dependency of tilelive-mapnik you will want to install it to actually make use of tilelive-mapnik through a reasonable API.
https://github.com/mapbox/tippecanoe,Installation
https://github.com/mapbox/tippecanoe,The easiest way to install tippecanoe on OSX is with Homebrew:
https://github.com/mapbox/tippecanoe,$ brew install tippecanoe
https://github.com/mapbox/tippecanoe,On Ubuntu it will usually be easiest to build from the source repository:
https://github.com/mapbox/tippecanoe,$ git clone https://github.com/mapbox/tippecanoe.git
https://github.com/mapbox/tippecanoe,$ cd tippecanoe
https://github.com/mapbox/tippecanoe,$ make -j
https://github.com/mapbox/tippecanoe,$ make install
https://github.com/mapbox/tippecanoe,See Development below for how to upgrade your C++ compiler or install prerequisite packages if you get compiler errors.
https://github.com/mbloch/mapshaper,"With Node installed, you can install the latest release version of mapshaper using npm. Install with the ""-g"" flag to make the executable scripts available systemwide."
https://github.com/mbloch/mapshaper,npm install -g mapshaper
https://github.com/msracver/Flow-Guided-Feature-Aggregation,Requirements: Software
https://github.com/msracver/Flow-Guided-Feature-Aggregation,"MXNet from the offical repository. We tested our code on MXNet@(v0.10.0). Due to the rapid development of MXNet, it is recommended to checkout this version if you encounter any issues. We may maintain this repository periodically if MXNet adds important feature in future release."
https://github.com/msracver/Flow-Guided-Feature-Aggregation,"Python packages might missing: cython, opencv-python >= 3.2.0, easydict. If pip is set up on your system, those packages should be able to be fetched and installed by running"
https://github.com/msracver/Flow-Guided-Feature-Aggregation,pip install Cython
https://github.com/msracver/Flow-Guided-Feature-Aggregation,pip install opencv-python==3.2.0.6
https://github.com/msracver/Flow-Guided-Feature-Aggregation,pip install easydict==1.6
https://github.com/msracver/Flow-Guided-Feature-Aggregation,"For Windows users, Visual Studio 2015 is needed to compile cython module."
https://github.com/msracver/Flow-Guided-Feature-Aggregation,Requirements: Hardware
https://github.com/msracver/Flow-Guided-Feature-Aggregation,Any NVIDIA GPUs with at least 8GB memory should be OK.
https://github.com/msracver/Flow-Guided-Feature-Aggregation,Installation
https://github.com/msracver/Flow-Guided-Feature-Aggregation,"Clone the Flow-Guided Feature Aggregation repository, and we call the directory that you cloned as ${FGFA_ROOT}."
https://github.com/msracver/Flow-Guided-Feature-Aggregation,git clone https://github.com/msracver/Flow-Guided-Feature-Aggregation.git
https://github.com/msracver/Flow-Guided-Feature-Aggregation,"For Windows users, run cmd .\init.bat. For Linux user, run sh ./init.sh. The scripts will build cython module automatically and create some folders."
https://github.com/msracver/Flow-Guided-Feature-Aggregation,Install MXNet:
https://github.com/msracver/Flow-Guided-Feature-Aggregation,3.1 Clone MXNet and checkout to MXNet@(v0.10.0) by
https://github.com/msracver/Flow-Guided-Feature-Aggregation,git clone --recursive https://github.com/apache/incubator-mxnet.git
https://github.com/msracver/Flow-Guided-Feature-Aggregation,cd incubator-mxnet
https://github.com/msracver/Flow-Guided-Feature-Aggregation,git checkout v0.10.0
https://github.com/msracver/Flow-Guided-Feature-Aggregation,git submodule update
https://github.com/msracver/Flow-Guided-Feature-Aggregation,3.2 Copy operators in $(FGFA_ROOT)/fgfa_rfcn/operator_cxx to $(YOUR_MXNET_FOLDER)/src/operator/contrib by
https://github.com/msracver/Flow-Guided-Feature-Aggregation,cp -r $(FGFA_ROOT)/fgfa_rfcn/operator_cxx/* $(MXNET_ROOT)/src/operator/contrib/
https://github.com/msracver/Flow-Guided-Feature-Aggregation,3.3 Compile MXNet
https://github.com/msracver/Flow-Guided-Feature-Aggregation,cd ${MXNET_ROOT}
https://github.com/msracver/Flow-Guided-Feature-Aggregation,make -j4
https://github.com/msracver/Flow-Guided-Feature-Aggregation,3.4 Install the MXNet Python binding by
https://github.com/msracver/Flow-Guided-Feature-Aggregation,"Note: If you will actively switch between different versions of MXNet, please follow 3.5 instead of 3.4"
https://github.com/msracver/Flow-Guided-Feature-Aggregation,cd python
https://github.com/msracver/Flow-Guided-Feature-Aggregation,sudo python setup.py install
https://github.com/msracver/Flow-Guided-Feature-Aggregation,"3.5 For advanced users, you may put your Python packge into ./external/mxnet/$(YOUR_MXNET_PACKAGE), and modify MXNET_VERSION in ./experiments/fgfa_rfcn/cfgs/*.yaml to $(YOUR_MXNET_PACKAGE). Thus you can switch among different versions of MXNet quickly."
https://github.com/nypl-spacetime/map-vectorizer,If you use PIP (recommended) you will get the necessary Python packages with: pip install -r requirements.txt
https://github.com/nypl-spacetime/map-vectorizer,install.packages('rgdal')
https://github.com/nypl-spacetime/map-vectorizer,install.packages('alphahull')
https://github.com/nypl-spacetime/map-vectorizer,install.packages('igraph')
https://github.com/nypl-spacetime/map-vectorizer,install.packages('shapefiles')
https://github.com/nypl-spacetime/map-vectorizer,It is also a good idea to install QGIS to test your results
https://github.com/odoe/generator-arcgis-js-app,npm install -g yo
https://github.com/odoe/generator-arcgis-js-app,npm install -g bower
https://github.com/odoe/generator-arcgis-js-app,Bower is a required dependency of using the packages in the generated app.
https://github.com/odoe/generator-arcgis-js-app,"To install generator-arcgis-js-app from npm, run:"
https://github.com/odoe/generator-arcgis-js-app,npm install -g generator-arcgis-js-app
https://github.com/ondrolexa/apsg,Installation
https://github.com/ondrolexa/apsg,PyPI
https://github.com/ondrolexa/apsg,"To install APSG, just execute"
https://github.com/ondrolexa/apsg,pip install apsg
https://github.com/ondrolexa/apsg,"Alternatively, you download the package manually from the Python Package Index https://pypi.org/project/apsg, unzip it, navigate into the package, and use the command:"
https://github.com/ondrolexa/apsg,python setup.py install
https://github.com/ondrolexa/apsg,Upgrading via pip
https://github.com/ondrolexa/apsg,"To upgrade an existing version of APSG from PyPI, execute"
https://github.com/ondrolexa/apsg,pip install apsg --upgrade --no-deps
https://github.com/ondrolexa/apsg,"Please note that the dependencies (Matplotlib, NumPy and SciPy) will also be upgraded if you omit the --no-deps flag; use the --no-deps (""no dependencies"") flag if you don't want this."
https://github.com/ondrolexa/apsg,Installing APSG from the source distribution
https://github.com/ondrolexa/apsg,"In rare cases, users reported problems on certain systems with the default pip installation command, which installs APSG from the binary distribution (""wheels"") on PyPI. If you should encounter similar problems, you could try to install APSG from the source distribution instead via"
https://github.com/ondrolexa/apsg,pip install --no-binary :all: apsg
https://github.com/ondrolexa/apsg,"Also, I would appreciate it if you could report any issues that occur when using pip install apsg in hope that we can fix these in future releases."
https://github.com/ondrolexa/apsg,Conda
https://github.com/ondrolexa/apsg,The APSG package is also available through conda-forge.
https://github.com/ondrolexa/apsg,Installing apsg
https://github.com/ondrolexa/apsg,Installing apsg from the conda-forge channel can be achieved by adding conda-forge to your channels with:
https://github.com/ondrolexa/apsg,conda config --add channels conda-forge
https://github.com/ondrolexa/apsg,"Once the conda-forge channel has been enabled, apsg can be installed with:"
https://github.com/ondrolexa/apsg,conda install apsg
https://github.com/ondrolexa/apsg,It is possible to list all of the versions of apsg available on your platform with:
https://github.com/ondrolexa/apsg,conda search apsg --channel conda-forge
https://github.com/ondrolexa/apsg,Master version
https://github.com/ondrolexa/apsg,The APSG version on PyPI may always one step behind; you can install the latest development version from the GitHub repository by executing
https://github.com/ondrolexa/apsg,pip install git+git://github.com/ondrolexa/apsg.git
https://github.com/ondrolexa/apsg,"Or, you can fork the GitHub repository from https://github.com/ondrolexa/apsg and install APSG from your local drive via"
https://github.com/phoenix104104/LapSRN,Requirements and Dependencies
https://github.com/phoenix104104/LapSRN,MATLAB (we test with MATLAB R2017a on Ubuntu 16.04 and Windows 7)
https://github.com/phoenix104104/LapSRN,Cuda & Cudnn (we test with Cuda 8.0 and Cudnn 5.1)
https://github.com/phoenix104104/LapSRN,Installation
https://github.com/phoenix104104/LapSRN,Download repository:
https://github.com/phoenix104104/LapSRN,$ git clone https://github.com/phoenix104104/LapSRN.git
https://github.com/phoenix104104/LapSRN,Run install.m in MATLAB to compile MatConvNet:
https://github.com/phoenix104104/LapSRN,# Start MATLAB
https://github.com/phoenix104104/LapSRN,$ matlab
https://github.com/phoenix104104/LapSRN,>> install
https://github.com/phoenix104104/LapSRN,"If you install MatConvNet in your own path, you need to change the corresponding path in install.m, train_LapSRN.m and test_LapSRN.m."
https://github.com/phuang17/DeepMVS,Requirements
https://github.com/phuang17/DeepMVS,python 2.7
https://github.com/phuang17/DeepMVS,numpy 1.13.1
https://github.com/phuang17/DeepMVS,pytorch 0.3.0 and torchvision: Follow the instructions from their website.
https://github.com/phuang17/DeepMVS,opencv 3.1.0: Run conda install -c menpo opencv or pip install opencv-python.
https://github.com/phuang17/DeepMVS,"imageio 2.2.0 (with freeimage plugin): Run conda install -c conda-forge imageio or pip install imageio. To install freeimage plugin, run the following Python script once:"
https://github.com/phuang17/DeepMVS,import imageio
https://github.com/phuang17/DeepMVS,imageio.plugins.freeimage.download()
https://github.com/phuang17/DeepMVS,h5py 2.7.0: Run conda install h5py or pip install h5py.
https://github.com/phuang17/DeepMVS,lz4 0.23.1: Run pip install lz4.
https://github.com/phuang17/DeepMVS,"cuda 8.0.61 and 16GB GPU RAM (required for gpu support): The training codes use up to 14GB of the GPU RAM with the default configuration. We train our model with an NVIDIA Tesla P100 GPU. To reduce GPU RAM usage, feel free to try smaller --patch_width, --patch_height, --num_depths, and --max_num_neighbors. However, the resulting model may not show the efficacy as appeared in our paper."
https://github.com/phuang17/DeepMVS,"python python/train.py # This may take up to 4-6 days to complete, depending on which GPU is used."
https://github.com/phuang17/DeepMVS,imageio 2.2.0: Run conda install -c conda-forge imageio or pip install imageio.
https://github.com/phuang17/DeepMVS,pyquaternion 0.9.0: Run pip install pyquaternion.
https://github.com/phuang17/DeepMVS,pydensecrf: Run pip install pydensecrf.
https://github.com/phuang17/DeepMVS,cuda 8.0.61 and 6GB GPU RAM (required for gpu support): The testing codes use up to 4GB of the GPU RAM with the default configuration.
https://github.com/phuang17/DeepMVS,COLMAP 3.2: Follow the instructions from their website.
https://github.com/pysal/pysal/,Installation
https://github.com/pysal/pysal/,PySAL is available through Anaconda (in the defaults or conda-forge channel) and Enthought Canopy. We recommend installing PySAL from conda-forge:
https://github.com/pysal/pysal/,conda install pysal
https://github.com/pysal/pysal/,PySAL can be installed using pip:
https://github.com/pysal/pysal/,pip install pysal
https://github.com/pysal/pysal/,As of version 2.0.0 PySAL has shifted to Python 3 only.
https://github.com/pysal/pysal/,Users who need an older stable version of PySAL that is Python 2 compatible can install version 1.14.3 through pip or conda:
https://github.com/pysal/pysal/,conda install pysal==1.14.3
https://github.com/pyvista/pymeshfix,Installation
https://github.com/pyvista/pymeshfix,From PyPI
https://github.com/pyvista/pymeshfix,pip install pymeshfix
https://github.com/pyvista/pymeshfix,From source at GitHub
https://github.com/pyvista/pymeshfix,git clone https://github.com/pyvista/pymeshfix
https://github.com/pyvista/pymeshfix,cd pymeshfix
https://github.com/pyvista/pymeshfix,pip install .
https://github.com/pyvista/pyvista,Installation
https://github.com/pyvista/pyvista,PyVista can be installed from PyPI using pip on Python >= 3.5:
https://github.com/pyvista/pyvista,pip install pyvista
https://github.com/pyvista/pyvista,"You can also visit PyPi, Anaconda, or GitHub to download the source."
https://github.com/pyvista/tetgen,Installation
https://github.com/pyvista/tetgen,From PyPI
https://github.com/pyvista/tetgen,pip install tetgen
https://github.com/pyvista/tetgen,From source at GitHub
https://github.com/pyvista/tetgen,git clone https://github.com/pyvista/tetgen
https://github.com/pyvista/tetgen,cd tetgen
https://github.com/pyvista/tetgen,pip install .
https://github.com/rowanz/neural-motifs,"Install python3.6 and pytorch 3. I recommend the Anaconda distribution. To install PyTorch if you haven't already, use conda install pytorch=0.3.0 torchvision=0.2.0 cuda90 -c pytorch."
https://github.com/rowanz/neural-motifs,Update the config file with the dataset paths. Specifically:
https://github.com/rowanz/neural-motifs,"Visual Genome (the VG_100K folder, image_data.json, VG-SGG.h5, and VG-SGG-dicts.json). See data/stanford_filtered/README.md for the steps I used to download these."
https://github.com/rowanz/neural-motifs,You'll also need to fix your PYTHONPATH: export PYTHONPATH=/home/rowan/code/scene-graph
https://github.com/rowanz/neural-motifs,Compile everything. run make in the main directory: this compiles the Bilinear Interpolation operation for the RoIs as well as the Highway LSTM.
https://github.com/ryersonvisionlab/two-stream-dyntex-synth,Requirements
https://github.com/ryersonvisionlab/two-stream-dyntex-synth,"Tensorflow 1.3 (or latest, although not tested)"
https://github.com/ryersonvisionlab/two-stream-dyntex-synth,Preferably a Titan X for synthesizing 12 frames
https://github.com/ryersonvisionlab/two-stream-dyntex-synth,Appearance-stream tfmodel
https://github.com/ryersonvisionlab/two-stream-dyntex-synth,Dynamics-stream tfmodel
https://github.com/ryersonvisionlab/two-stream-dyntex-synth,Dynamic textures
https://github.com/ryersonvisionlab/two-stream-dyntex-synth,Static textures (for dynamics style transfer)
https://github.com/ryersonvisionlab/two-stream-dyntex-synth,Setup
https://github.com/ryersonvisionlab/two-stream-dyntex-synth,Store the appearance-stream tfmodel in ./models.
https://github.com/ryersonvisionlab/two-stream-dyntex-synth,Store the dynamics-stream tfmodel in ./models. The filepath to this model is your --dynamics_model path.
https://github.com/salihkaragoz/pose-residual-network-pytorch,Prerequisites
https://github.com/salihkaragoz/pose-residual-network-pytorch,python
https://github.com/salihkaragoz/pose-residual-network-pytorch,pytorch
https://github.com/salihkaragoz/pose-residual-network-pytorch,numpy
https://github.com/salihkaragoz/pose-residual-network-pytorch,tqdm
https://github.com/salihkaragoz/pose-residual-network-pytorch,pycocotools
https://github.com/salihkaragoz/pose-residual-network-pytorch,progress
https://github.com/salihkaragoz/pose-residual-network-pytorch,scikit-image
https://github.com/salihkaragoz/pose-residual-network-pytorch,Installing
https://github.com/salihkaragoz/pose-residual-network-pytorch,Clone this repository git clone https://github.com/salihkaragoz/pose-residual-network-pytorch.git
https://github.com/salihkaragoz/pose-residual-network-pytorch,Install Pytorch
https://github.com/salihkaragoz/pose-residual-network-pytorch,pip install -r src/requirements.txt
https://github.com/salihkaragoz/pose-residual-network-pytorch,To download COCO dataset train2017 and val2017 annotations run: bash data/coco.sh. (data size: ~240Mb)
https://github.com/sentinelsat/sentinelsat,Install sentinelsat through pip:
https://github.com/sentinelsat/sentinelsat,pip install sentinelsat
https://github.com/tensorflow/tensorflow,Installation
https://github.com/tensorflow/tensorflow,To install the current release for CPU-only:
https://github.com/tensorflow/tensorflow,pip install tensorflow
https://github.com/tensorflow/tensorflow,Use the GPU package for CUDA-enabled GPU cards:
https://github.com/tensorflow/tensorflow,pip install tensorflow-gpu
https://github.com/tensorflow/tensorflow,"See Installing TensorFlow for detailed instructions, and how to build from source."
https://github.com/tensorflow/tensorflow,People who are a little more adventurous can also try our nightly binaries:
https://github.com/tensorflow/tensorflow,"Nightly pip packages * We are pleased to announce that TensorFlow now offers nightly pip packages under the tf-nightly and tf-nightly-gpu project on PyPi. Simply run pip install tf-nightly or pip install tf-nightly-gpu in a clean environment to install the nightly TensorFlow build. We support CPU and GPU packages on Linux, Mac, and Windows."
https://github.com/twbs/bootstrap,Download the latest release.
https://github.com/twbs/bootstrap,Clone the repo: git clone https://github.com/twbs/bootstrap.git
https://github.com/twbs/bootstrap,Install with npm: npm install bootstrap
https://github.com/twbs/bootstrap,Install with yarn: yarn add bootstrap@4.3.1
https://github.com/twbs/bootstrap,Install with Composer: composer require twbs/bootstrap:4.3.1
https://github.com/twbs/bootstrap,Install with NuGet: CSS: Install-Package bootstrap Sass: Install-Package bootstrap.sass
https://github.com/ungarj/tilematrix,Installation
https://github.com/ungarj/tilematrix,Use pip to install the latest stable version:
https://github.com/ungarj/tilematrix,pip install tilematrix
https://github.com/ungarj/tilematrix,Manually install the latest development version
https://github.com/ungarj/tilematrix,pip install -r requirements.txt
https://github.com/ungarj/tilematrix,python setup.py install
https://github.com/vuejs/vue-devtools/,Installation
https://github.com/vuejs/vue-devtools/,Get the Chrome Extension / (beta channel)
https://github.com/vuejs/vue-devtools/,Get the Firefox Addon / (beta channel)
https://github.com/vuejs/vue-devtools/,Get standalone Electron app (works with any environment!)
https://github.com/vuejs/vue-devtools/,Manual Installation
https://github.com/vuejs/vue-devtools/,This is only necessary when you want to build the extension yourself from source to get not-yet-released features.
https://github.com/vuejs/vue-devtools/,Make sure you are using Node 6+ and NPM 3+
https://github.com/vuejs/vue-devtools/,Clone this repo
https://github.com/vuejs/vue-devtools/,npm install (Or yarn install if you are using yarn as the package manager)
https://github.com/vuejs/vue-devtools/,npm run build
https://github.com/vuejs/vue-devtools/,Open Chrome extension page
https://github.com/vuejs/vue-devtools/,"Check ""developer mode"""
https://github.com/vuejs/vue-devtools/,"Click ""load unpacked extension"", and choose shells/chrome."
https://github.com/whimian/pyGeoPressure,Installation
https://github.com/whimian/pyGeoPressure,pyGeoPressure is on PyPI:
https://github.com/whimian/pyGeoPressure,pip install pygeopressure
https://github.com/wuhuikai/DeepGuidedFilter,Prepare Environment
https://github.com/wuhuikai/DeepGuidedFilter,Download source code from GitHub.
https://github.com/wuhuikai/DeepGuidedFilter,git clone https://github.com/wuhuikai/DeepGuidedFilter
https://github.com/wuhuikai/DeepGuidedFilter,cd DeepGuidedFilter && git checkout release
https://github.com/wuhuikai/DeepGuidedFilter,Install dependencies (PyTorch version).
https://github.com/wuhuikai/DeepGuidedFilter,conda install opencv
https://github.com/wuhuikai/DeepGuidedFilter,conda install pytorch=0.2.0 cuda80 -c soumith
https://github.com/wuhuikai/DeepGuidedFilter,pip install -r requirements.txt
https://github.com/wuhuikai/DeepGuidedFilter,(Optional) Install dependencies for MonoDepth (Tensorflow version).
https://github.com/wuhuikai/DeepGuidedFilter,cd ComputerVision/MonoDepth
https://github.com/wuhuikai/DeepGuidedFilter,Install Released Version
https://github.com/wuhuikai/DeepGuidedFilter,PyTorch Version
https://github.com/wuhuikai/DeepGuidedFilter,pip install guided-filter-pytorch
https://github.com/wuhuikai/DeepGuidedFilter,Tensorflow Version
https://github.com/wuhuikai/DeepGuidedFilter,pip install guided-filter-tf
https://github.com/yuhuayc/da-faster-rcnn,Build Caffe and pycaffe (see: Caffe installation instructions)
https://github.com/yuhuayc/da-faster-rcnn,Build the Cython modules
https://github.com/yuhuayc/da-faster-rcnn,cd $FRCN_ROOT/lib
https://github.com/yuhuayc/da-faster-rcnn,make
https://github.com/zhiqiangdon/CU-Net,Prerequisites
https://github.com/zhiqiangdon/CU-Net,This package has the following requirements:
https://github.com/zhiqiangdon/CU-Net,Python 2.7
https://github.com/zhiqiangdon/CU-Net,Pytorch v0.4.0 or Pytorch v0.1.12
https://github.com/zhiqiangdon/CU-Net,Note that the script name with string prev-version requires Pytorch v0.1.12.
